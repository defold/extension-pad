local prettify = require("example.prettify")

local ASSETPACK1_NAME = "asset_pack_1"
local ASSETPACK2_NAME = "asset_pack_2"
local ASSETPACK1_PROXY = "#assetpack1proxy"

-- https://developer.android.com/reference/com/google/android/play/core/assetpacks/model/AssetPackStatus.html#UNKNOWN
local PACK_STATUS_TO_TEXT = {}
if pad then
	PACK_STATUS_TO_TEXT[pad.STATUS_UNKNOWN] = "UNKNOWN"
	PACK_STATUS_TO_TEXT[pad.STATUS_PENDING] = "PENDING"
	PACK_STATUS_TO_TEXT[pad.STATUS_DOWNLOADING] = "DOWNLOADING"
	PACK_STATUS_TO_TEXT[pad.STATUS_TRANSFERRING] = "TRANSFERRING"
	PACK_STATUS_TO_TEXT[pad.STATUS_COMPLETED] = "COMPLETED"
	PACK_STATUS_TO_TEXT[pad.STATUS_FAILED] = "FAILED"
	PACK_STATUS_TO_TEXT[pad.STATUS_CANCELED] = "CANCELED"
	PACK_STATUS_TO_TEXT[pad.STATUS_WAITING_FOR_WIFI] = "WAITING_FOR_WIFI"
	PACK_STATUS_TO_TEXT[pad.STATUS_NOT_INSTALLED] = "NOT_INSTALLED"
	PACK_STATUS_TO_TEXT[pad.STATUS_REQUIRES_USER_CONFIRMATION] = "REQUIRES_USER_CONFIRMATION"
end

-- https://developer.android.com/reference/com/google/android/play/core/assetpacks/model/AssetPackErrorCode.html?hl=en#ACCESS_DENIED
local ERRORCODE_TO_TEXT = {}
if pad then
	ERRORCODE_TO_TEXT[pad.ERRORCODE_NO_ERROR] = "ERRORCODE_NO_ERROR"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_APP_UNAVAILABLE] = "ERRORCODE_APP_UNAVAILABLE"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_PACK_UNAVAILABLE] = "ERRORCODE_PACK_UNAVAILABLE"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_INVALID_REQUEST] = "ERRORCODE_INVALID_REQUEST"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_DOWNLOAD_NOT_FOUND] = "ERRORCODE_DOWNLOAD_NOT_FOUND"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_API_NOT_AVAILABLE] = "ERRORCODE_API_NOT_AVAILABLE"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_NETWORK_ERROR] = "ERRORCODE_NETWORK_ERROR"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_ACCESS_DENIED] = "ERRORCODE_ACCESS_DENIED"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_INSUFFICIENT_STORAGE] = "ERRORCODE_INSUFFICIENT_STORAGE"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_PLAY_STORE_NOT_FOUND] = "ERRORCODE_PLAY_STORE_NOT_FOUND"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_NETWORK_UNRESTRICTED] = "ERRORCODE_NETWORK_UNRESTRICTED"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_APP_NOT_OWNED] = "ERRORCODE_APP_NOT_OWNED"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_CONFIRMATION_NOT_REQUIRED] = "ERRORCODE_CONFIRMATION_NOT_REQUIRED"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_UNRECOGNIZED_INSTALLATION] = "ERRORCODE_UNRECOGNIZED_INSTALLATION"
	ERRORCODE_TO_TEXT[pad.ERRORCODE_INTERNAL_ERROR] = "ERRORCODE_INTERNAL_ERROR"
end


-- log helper for visual and console logging of formatted text and Lua tables
local log_entries = {}
local function log(v, ...)
	local text = (type(v) == "table") and prettify(v) or v:format(...)
	if #log_entries == 15 then
		table.remove(log_entries, 1)
	end
	log_entries[#log_entries + 1] = text

	print(text)
	gui.set_text(gui.get_node("info"), table.concat(log_entries, "\n"))
end

-- button click checking
local function pressed(node_id, action)
	return action.released and action.x and gui.pick_node(gui.get_node(node_id), action.x, action.y)
end

-- log the entire pack state
local function log_pack_state(pack_name)
	-- status
	local status = pad.get_pack_status(pack_name)
	log("status %s (%d)", PACK_STATUS_TO_TEXT[status], status)

	-- download progress
	if status == pad.STATUS_TRANSFERRING then
		local downloaded = pad.get_pack_bytes_downloaded(pack_name)
		local total = pad.get_pack_total_bytes_to_download(pack_name)
		local percentage = pad.get_pack_transfer_progress_percentage(pack_name)
		log("transferring %d / %d %d%%", downloaded, total, percentage)
	else
		local total = pad.get_pack_total_bytes_to_download(pack_name)
		log("size %d", total)
	end
	
	-- error?
	local error_code = pad.get_pack_error_code(pack_name)
	if error_code ~= pad.ERRORCODE_NO_ERROR then
		log("error %s %d", ERRORCODE_TO_TEXT[error_code], error_code)
	end

end

-- load the Defold logo from assetpack path
local function load_logo(self, path)
	if self.texture_id then
		log("image already loaded")
		return
	end

	local f = io.open(path, "rb")
	local data = f:read("*a")
	local img = image.load(data, { premultiply_alpha = true })
	if not img then 
		log("unable to load image")
		return
	end

	local texture_id = "fast-follow-logo-texture"
	if gui.new_texture(texture_id, img.width, img.height, img.type, img.buffer) then
		self.texture_id = texture_id
		gui.set_texture(gui.get_node("fast-follow-logo"), texture_id)
		log("set new texture")
	else
		log("unable to create texture")
	end
end

function init(self)
	log("init v.%d", sys.get_config_int("android.version_code", 0))

	log("removing live update mounts")
	local mounts = liveupdate.get_mounts()
	for _,mount in ipairs(mounts) do
		if mount.name ~= "_base" then
			log(mount)
			log("removing mount %s", mount.name)
			liveupdate.remove_mount(mount.name)
		else
			log("keeping mount _base")
		end
	end
	
	if not pad then return end
	pad.set_listener(function(_, event)
		log("pad event for %s", event.pack_name)
		if event.event_type == pad.EVENT_PACK_STATE_UPDATED then
			log_pack_state(event.pack_name)
		else
			log(event)
		end
	end)

	-- request initial state for both asset packs
	pad.get_pack_state(ASSETPACK1_NAME)
	pad.get_pack_state(ASSETPACK2_NAME)
end

function on_input(self, action_id, action)
	if pressed("exit/button", action) then
		sys.exit(0)
		return
	end
	
	if not pad then return end

	if pressed("fetch1/button", action) then
		log("fetch")
		pad.fetch(ASSETPACK1_NAME)
	elseif pressed("remove1/button", action) then
		log("remove")
		msg.post(ASSETPACK1_PROXY, "unload")
		liveupdate.remove_mount(ASSETPACK1_NAME)
		pad.remove_pack(ASSETPACK1_NAME)
	elseif pressed("get_state1/button", action) then
		print("get_state")
		pad.get_pack_state(ASSETPACK1_NAME)
	elseif pressed("print_state1/button", action) then
		log("print_state")
		log_pack_state(ASSETPACK1_NAME)
	elseif pressed("pack_location1/button", action) then
		log("pack_location")
		log("get_pack_location %s", pad.get_pack_location(ASSETPACK1_NAME))
	elseif pressed("mount1/button", action) then
		log("mount")
		local path = "zip:" .. pad.get_pack_location(ASSETPACK1_NAME) .. "/assetpack1.zip"
		log("path %s", path)
		liveupdate.add_mount(ASSETPACK1_NAME, path, 1, function(self, path, uri, result)
			log("add_mount cb %s %s %d", path, uri, result)
			if result == liveupdate.LIVEUPDATE_OK then
				log("add_mount ok")
				msg.post(ASSETPACK1_PROXY, "async_load")
			end
		end)
	elseif pressed("missing_resources1/button", action) then
		log("missing_resources")
		local missing = collectionproxy.missing_resources(ASSETPACK1_PROXY)
		log(missing)
	elseif pressed("fetch2/button", action) then
		local status = pad.get_pack_status(ASSETPACK2_NAME)
		log("status %s", PACK_STATUS_TO_TEXT[status])
		if status == pad.STATUS_COMPLETED then
			log("loading logo")
			local logo_path = pad.get_pack_location(ASSETPACK2_NAME) .. "/logo-hor-classic-white-tagline.png"
			load_logo(self, logo_path)
		elseif status == pad.STATUS_NOT_INSTALLED then
			log("fetch")
			pad.fetch(ASSETPACK2_NAME)
		else
			log("wrong status")
		end
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
	end
end